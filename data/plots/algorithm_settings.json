{
  "apply_rearrangment": {
    "algo_apply_rearrangment": {
      "display_name" : "algo::apply_rearrangment"
    },
    "algo_apply_rearrangment_move": {
      "display_name" : "algo::apply_rearrangment_move"
    },
    "algo_apply_rearrangment_no_marker": {
      "display_name" : "algo::apply_rearrangment_no_marker"
    }
  },
  "lower_bound": {
    "algo_lower_bound_linear": {
      "display_name" : "algo::lower_bound_linear"
    },
    "algo_lower_bound_biased": {
      "display_name" : "algo::lower_bound_biased"
    },
    "algo_lower_bound": {
      "display_name" : "algo::lower_bound"
    },
    "algo_lower_bound_biased_expensive_cmp": {
      "display_name" : "algo::lower_bound_biased_expensive_cmp"
    },
    "std_lower_bound": {
      "display_name" : "std::lower_bound"
    }
  },
  "merge/set_union": {
    "algo_merge": {
      "display_name" : "algo::merge"
    },
    "algo_merge_biased_first": {
      "display_name" : "algo::merge_biased_first"
    },
    "algo_merge_biased_second": {
      "display_name" : "algo::merge_biased_second"
    },
    "algo_merge_expensive_cmp": {
      "display_name" : "algo::merge_expensive_cmp"
    },
    "std_merge": {
      "display_name" : "std::merge"
    }
  },
  "sort": {
    "algo_stable_sort_sufficient_allocation": {
      "display_name" : "algo::stable_sort_sufficient_allocation"
    },
    "std_sort": {
      "display_name" : "std::sort"
    },
    "std_stable_sort": {
      "display_name" : "std::stable_sort"
    },
    "algo_stable_sort_sufficient_allocation_std_merge": {
      "display_name" : "algo::stable_sort_sufficient_allocation_std_merge"
    },
    "algo_stable_sort_lifting": {
      "display_name" : "algo::stable_sort_lifting"
    }
  },
  "uint_tuple": {
    "uint_std_pair32" : {
      "display_name": "std::pair<std::uint32_t, std::uint32_t>"
    },
    "uint_std_pair64" : {
      "display_name": "std::pair<std::uint64_t, std::uint64_t>"
    },
    "uint_tuple_pair32": {
      "display_name" : "algo::uint_tuple<32, 32>"
    },
    "uint_tuple_pair64": {
      "display_name" : "algo::uint_tuple<64, 64>"
    },
    "uint32" : {
      "display_name" : "std::uint32_t"
    },
    "uint64" : {
      "display_name" : "std::uint64_t"
    }
  },
  "use_uint_tuple": {
    "use_pair": {
      "display_name": "std::pair"
    },
    "use_uint_tuple": {
      "display_name": "algo::uint_tuple"
    }
  },
  "remove": {
    "std_remove" : {
      "display_name": "std::remove"
    },
    "unsq_remove_16" : {
      "display_name" : "unsq::remove<16>"
    },
    "unsq_remove_32" : {
      "display_name" : "unsq::remove<32>"
    }
  }
}
